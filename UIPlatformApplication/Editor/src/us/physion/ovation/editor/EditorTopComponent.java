/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package us.physion.ovation.editor;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.title.TextTitle;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import ovation.*;
import us.physion.ovation.interfaces.ConnectionProvider;
import org.jfree.data.*;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.Dataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.ui.RectangleInsets;
import us.physion.ovation.interfaces.IEntityWrapper;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//us.physion.ovation.editor//Editor//EN",
autostore = false)
@TopComponent.Description(preferredID = "EditorTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "us.physion.ovation.editor.EditorTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_EditorAction",
preferredID = "EditorTopComponent")
@Messages({
    "CTL_EditorAction=Editor",
    "CTL_EditorTopComponent=Response Viewer",
    "HINT_EditorTopComponent=This plots the currently selected numeric Response data"
})
public final class EditorTopComponent extends TopComponent {
    
    Lookup.Result global;
    List<ChartPanel> chartPanels = new ArrayList<ChartPanel>();
    ChartTableModel chartModel = new ChartTableModel(chartPanels);

    private LookupListener listener = new LookupListener() {

        @Override
        public void resultChanged(LookupEvent le) {
            
            //TODO: we should have some other Interface for things that can update the tags view
            //then we could get rid of the Library dependancy on the Explorer API
            if (TopComponent.getRegistry().getActivated() instanceof ExplorerManager.Provider)
            {
                updateEntitySelection();
            }
        }
    };
    public EditorTopComponent() {
        initComponents();
        setName(Bundle.CTL_EditorTopComponent());
        setToolTipText(Bundle.HINT_EditorTopComponent());
        global = Utilities.actionsGlobalContext().lookupResult(IEntityWrapper.class);
        global.addLookupListener(listener);
        jTable1.setDefaultRenderer(ChartPanel.class, new ChartCellRenderer());

    }
    
    private TextTitle convertTitle(String s)
    {
        return new TextTitle(s, new Font("timesnewroman", Font.BOLD, 20));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        jTable1.setModel(chartModel);
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
        jPanel1.setVisible(false);
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    private void updateEntitySelection() {
        Collection<? extends IEntityWrapper> entities = global.allInstances();
        if (entities.size() == 0)
        {
            jPanel1.setVisible(false);
            return;
        }
        
        LinkedList<ChartWrapper> chartList = new LinkedList<ChartWrapper>();
        for (IEntityWrapper ew: entities)
        {
            if (ew.getType().isAssignableFrom(Epoch.class))
            {
                Epoch epoch = (Epoch)(ew.getEntity());//getEntity gets the context for the given thread
                for (String name: epoch.getResponseNames())
                {
                    ResponseWrapper entity = ResponseWrapper.createIfPlottable(epoch.getResponse(name));
                    if (entity == null)
                    {
                        continue;
                    }
                    ChartWrapper current = null;
                    for (ChartWrapper chart : chartList)
                    {
                        if (entity.xUnits().equals(chart.getXAxis()) && entity.yUnits().equals(chart.getYAxis())) {
                            current = chart;
                            current.setTitle("Responses for " + epoch.getProtocolID());
                            break;
                        }
                    }
                    if (current == null)
                    {
                        current = new ChartWrapper(new DefaultXYDataset(), entity.xUnits(), entity.yUnits());
                        System.out.println("Created new ChartWrapper with name " + ew.getDisplayName());
                       current.setTitle(ew.getDisplayName());
                        chartList.add(current);
                    }
                    
                    addXYDataset(current.getDataset(), entity, name);
                }
                
            }
            else if (ew.getType().isAssignableFrom(Response.class)) {
                ResponseWrapper entity = ResponseWrapper.createIfPlottable(ew);
                if (entity != null) {
                    ChartWrapper current = new ChartWrapper(new DefaultXYDataset(), entity.xUnits(), entity.yUnits());
                    current.setTitle(ew.getDisplayName());
                    chartList.add(current);
                    addXYDataset(current.getDataset(), entity, ew.getDisplayName());
                }
            }
        }
        runOnEDT(updateChartRunnable(chartList));
    }
    
    private Runnable updateChartRunnable(final List<ChartWrapper> charts)
    {
        final int height = this.getHeight();
        return new Runnable(){

            @Override
            public void run() {
                if (charts.size() == 0) {
                    jPanel1.setVisible(false);
                    return;
                }
                
                int initialSize = chartPanels.size();
                
                System.out.println("Chart panels sizeA: " + chartPanels.size());
                
                if (initialSize > 0) {
//                    chartPanels.removeAll(chartPanels.subList(0, chartPanels.size()));
                    while (!chartPanels.isEmpty()) {
                        chartPanels.remove(0);
                    }
                    System.out.println("Chart panels sizeB: " + chartPanels.size());
                    System.out.println("Deleting rows: 0 - " + (initialSize - 1));
                    chartModel.fireTableRowsDeleted(0, initialSize - 1);
                }
                
                System.out.println("Chart panels sizeC: " + chartPanels.size());
                
                for (ChartWrapper c : charts) {
                    JFreeChart chart;

                    chart = ChartFactory.createXYLineChart(c.getTitle(), c.getXAxis(), c.getYAxis(), c.getDataset(), PlotOrientation.VERTICAL, true, true, true);
                    ChartPanel p = new ChartPanel(chart);
                    chartPanels.add(p);
                    int rowheight = (int) (height / chartPanels.size());
                    System.out.println("Setting row height to " + rowheight);
                    if (rowheight >= 1) {
                        jTable1.setRowHeight(rowheight);
                    }

                    chart.setTitle(convertTitle(c.getTitle()));
                    chart.setPadding(new RectangleInsets(20, 20, 20, 20));
                    XYPlot plot = chart.getXYPlot();
                    plot.getDomainAxis().setLabelFont(new Font("timesnewroman", Font.LAYOUT_LEFT_TO_RIGHT, 15));
                    plot.getRangeAxis().setLabelFont(new Font("timesnewroman", Font.LAYOUT_LEFT_TO_RIGHT, 15));
                    plot.getRangeAxis().setLabelAngle(Math.PI / 2);
 
                }

                chartModel.fireTableDataChanged();
                jPanel1.setVisible(true);
            }
        };
    }
    
    private void runOnEDT(Runnable r) {
        
        if (EventQueue.isDispatchThread())
        {
            r.run();
        }
        else{
            SwingUtilities.invokeLater(r);
        }
    }

    private void addXYDataset(DefaultXYDataset ds, ResponseWrapper rw, String name)
    {
        NumericData d = rw.getData();
        double samplingRate = rw.getSamplingRate();
        long[] shape = d.getShape();
        long size = 1;
        for (int dimension = 0; dimension<shape.length; dimension++)
        {
            size = size*shape[dimension];
        }
        
        if (shape.length == 1)
        {
            if (d.getDataFormat() == NumericDataFormat.FloatingPointDataType)
            {
                double[] floatingData = d.getFloatingPointData();
                double[][] data = new double[2][(int) size];
                for (int i = 0; i < (int) size; ++i) {
                    data[1][i] = floatingData[i];
                    data[0][i] = i/samplingRate;
                }
                ds.addSeries(name, data);
            }
            else if (d.getDataFormat() == NumericDataFormat.SignedFixedPointDataType)
            {
                int[] integerData = d.getIntegerData();
                double[][] data = new double[(int) size][2];
                for (int i = 0; i < (int) size; ++i) {
                    data[1][i] = integerData[i];
                    data[0][i] = i/samplingRate;
                }
                ds.addSeries(name, data);
            }
            else if (d.getDataFormat() == NumericDataFormat.UnsignedFixedPointDataType)
            {
                long[] longData = d.getUnsignedIntData();
                double[][] data = new double[(int) size][2];
                for (int i = 0; i < (int) size; ++i) {
                    data[1][i] = longData[i];
                    data[0][i] = i/samplingRate;
                }
                ds.addSeries(name, data);
            }
            
            else{
                Ovation.getLogger().debug("NumericData object has unknown type: " + d.getDataFormat());
            }
        }
    }
    
}

class ResponseWrapper
{
    String xunits;
    String yunits;
    double samplingRate;
    NumericData data;
    
    protected ResponseWrapper() {}
    
    
    static ResponseWrapper createIfPlottable(Response r)
    {
        if (!r.getUTI().equals(Response.NUMERIC_DATA_UTI) || r.getShape().length != 1)
        {
            return null;
        }
    
        ResponseWrapper rw = new ResponseWrapper();
        rw.data = r.getData();
        rw.samplingRate = r.getSamplingRates()[0];
        rw.yunits = r.getUnits();
        rw.xunits = convertSamplingRateUnitsToGraphUnits(r.getSamplingUnits()[0]);
        return rw;
    }
    static ResponseWrapper createIfPlottable(IEntityWrapper ew)
    {
        return createIfPlottable((Response)ew.getEntity());
    }
    
    protected NumericData getData()
    {
        return data;
    }
    protected double getSamplingRate()
    {
        return samplingRate;
    }
    
    protected String xUnits()
    {
        return xunits;
    }
    protected String yUnits()
    {
        return yunits;
    }
    
    protected static String convertSamplingRateUnitsToGraphUnits(String samplingRateUnits){
       if (samplingRateUnits.toLowerCase().contains("hz"))
       {
           String prefix = samplingRateUnits.substring(0, samplingRateUnits.toLowerCase().indexOf("hz"));
           return "Time (in " + prefix + "Seconds)";
       }
       else return ("1 / " + samplingRateUnits);
    }
}

class ChartWrapper
{
    DefaultXYDataset _ds;
    String _xAxis;
    String _yAxis;
    String _title;
    
    ChartWrapper(DefaultXYDataset ds, String xAxis, String yAxis)
    {
        _ds = ds;
        _xAxis = xAxis;
        _yAxis = yAxis;
    }
    DefaultXYDataset getDataset(){ return _ds;}
    String getXAxis() { return _xAxis;}
    String getYAxis() { return _yAxis;}
    void setTitle(String s) {_title = s;}
    String getTitle() {return _title;}
}

class ChartTableModel extends DefaultTableModel {
  List<ChartPanel> data;

  public ChartTableModel(List<ChartPanel> data) {
    this.data = data;
  }
  
  public void setCharts(List<ChartPanel> charts)
  {
      data = charts;
  }

  public Class<?> getColumnClass(int columnIndex) { return ChartPanel.class; }
  public int getColumnCount() { return 1; }
  public String getColumnName(int columnIndex) { return ""; }
  public int getRowCount() { return (data == null) ? 0 : data.size(); }
  public Object getValueAt(int rowIndex, int columnIndex) { return data.get(rowIndex); }
  public boolean isCellEditable(int rowIndex, int columnIndex) { return true; }
}

class ChartCellRenderer implements TableCellRenderer {

  public Component getTableCellRendererComponent(JTable table, Object value,        boolean isSelected, boolean hasFocus, int row, int column) {
    ChartPanel panel = (ChartPanel)value;
    if (table.getRowCount() != 0 && table.getColumnCount() != 0);
    {
        panel.setSize(new Dimension(table.getWidth()/table.getColumnCount(), table.getHeight()/table.getRowCount()));
    }
    return panel;
  }
}
 
